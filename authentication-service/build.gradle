plugins {
    id 'java'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'vn.chuot96'
version = '0.0.1-SNAPSHOT'

bootJar {
    archiveFileName = "authentication-service.jar"
}

bootRun {
    systemProperty "app.code", project.findProperty("app.tbirpg2d.code") ?: ""
    systemProperty "google.client.id", project.findProperty("google.client.id") ?: ""
    systemProperty "facebook.app.id", project.findProperty("facebook.app.id") ?: ""
    systemProperty "facebook.app.access-token", project.findProperty("facebook.app.access-token") ?: ""
    systemProperty "zalo.app.id", project.findProperty("zalo.app.id") ?: ""
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

spotless {
    java {
        palantirJavaFormat()
        target 'src/**/*.java'
    }
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.properties', '*.yml', '*.yaml', '*.xml', '*.json', '*.sh'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '10.12.3'
    configFile = file("${rootDir}/checkstyle.xml")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/phnam2301/spring-boot-starter-library")
        credentials {
            username = findProperty("github.publisher.username") ?: ""
            password = findProperty("github.publisher.password") ?: ""
        }
    }
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    implementation "io.wliamp:starter-token:0.0.6"
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
